{"ast":null,"code":"import mockjs from 'mockjs'; // import { delay } from 'roadhog-api-doc';  // 需要添加所有的请求延迟的时候， 可以通过第三方插件来简化这个问题\n// 当客户端（浏览器）发送请求，如：GET /api/users，\n// 那么本地启动的 umi dev 会跟此配置文件匹配请求路径以及方法，\n// 如果匹配到了，就会将请求通过配置处理，就可以像样例一样，\n// 你可以直接返回数据，也可以通过函数处理以及重定向到另一个服务器。\n// 以下真假切换接口\n// if (process.env.NODE_ENV === 'development') {\n//   require('./src/mock')\n// }\n// let postApi = (path, mock) => {\n//   // 当为0的时候\n//   return path + (mock ? '' : '.mock'); // '/todoList.mock'\n// };\n// export default {\n//   \"newsList\": postApi(\"/api/order/news\"),\n//   \"newsList2\": postApi(\"/api/newsList2\"),\n//   \"todoList\": postApi(\"/todoList\", 0)  // postApi方法接收两个参数，接口地址及是否需要mock数据，0需要，1不需要\n// }\n// 以上真假切换接口\n\nconst getNotice = (req, res) => {\n  res.end('OK');\n};\n\nconst proxy = {\n  // Mock.mock( rurl, template )\n  'GET /api/currentUser': mockjs.mock('', {\n    'code': 0,\n    'data': {\n      'list|1-10': [{\n        // 属性 id 是一个自增数，起始值为 1，每次增 1\n        'id|+1': 1,\n        'title': '前端人人@id',\n        'status': 1\n      }]\n    },\n    'message': '操作成功',\n    'systemDate': new Date().getTime()\n  }),\n  // 使用 mockjs 等三方库   Mock.mock( rurl, rtype, template )\n  'GET /api/tags': mockjs.mock('/api/tags', 'get', {\n    'list|100': [{\n      name: '@city',\n      'value|1-10': 50,\n      'type|0-2': 1\n    }]\n  }),\n  // 添加跨域请求头 Mock.mock( rurl, rtype, function( options ) )\n  '/api/users/create': mockjs.mock('/api/users/create', (req, res) => {\n    // 指定被拦截的 Ajax 请求的响应时间，单位是毫秒。值可以是正整数，例如 400，表示 400 毫秒 后才会返回响应内容；也可以是横杠 '-' 风格的字符串，例如 '200-600'，表示响应时间介于 200 和 600 毫秒之间。默认值是'10-100'。\n    mockjs.setup({\n      timeout: 400\n    }); // res.setHeader('Access-Control-Allow-Origin', '*');\n\n    return {\n      users: [1, 2]\n    }; // 直接输出res.data = { users: [1, 2] }\n  }),\n  // 支持制定执行回调\n  'GET /api/project/notice': getNotice,\n  // 支持值为 Object 和 Array\n  'GET /api/users': {\n    users: [1, 2]\n  },\n  // 静态 Mock 数据\n  '/api/random': mockjs.mock({\n    // 只随机一次\n    'number|1-100': 100\n  }),\n  // 动态 Mock 数据\n  '/api/randoms': (req, res) => {\n    res.send(mockjs.mock({\n      // 每次请求均产生随机值\n      'number|1-100': 100\n    }));\n  }\n};\nexport default proxy; // 调用 delay 函数，统一处理\n// export default delay(proxy, 1000)","map":{"version":3,"sources":["/Users/vera/Documents/Project/Private/static/src/mock/index.js"],"names":["mockjs","getNotice","req","res","end","proxy","mock","Date","getTime","name","setup","timeout","users","send"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB,C,CACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,SAAS,GAAI,CAACC,GAAD,EAAMC,GAAN,KAAc;AAAEA,EAAAA,GAAG,CAACC,GAAJ,CAAQ,IAAR;AAAgB,CAAnD;;AAEC,MAAMC,KAAK,GAAG;AACb;AACA,0BAAwBL,MAAM,CAACM,IAAP,CAAa,EAAb,EAAgB;AACtC,YAAQ,CAD8B;AAEtC,YAAQ;AACJ,mBAAa,CAAC;AACV;AACA,iBAAS,CAFC;AAGV,iBAAS,SAHC;AAIV,kBAAU;AAJA,OAAD;AADT,KAF8B;AAUtC,eAAW,MAV2B;AAWtC,kBAAc,IAAIC,IAAJ,GAAWC,OAAX;AAXwB,GAAhB,CAFX;AAgBb;AACA,mBAAiBR,MAAM,CAACM,IAAP,CAAY,WAAZ,EAAyB,KAAzB,EAAgC;AAC/C,gBAAY,CAAC;AAAEG,MAAAA,IAAI,EAAE,OAAR;AAAiB,oBAAc,EAA/B;AAAmC,kBAAY;AAA/C,KAAD;AADmC,GAAhC,CAjBJ;AAqBb;AACA,uBAAqBT,MAAM,CAACM,IAAP,CAAY,mBAAZ,EAAiC,CAACJ,GAAD,EAAMC,GAAN,KAAc;AAClE;AACAH,IAAAA,MAAM,CAACU,KAAP,CAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb,EAFkE,CAKlE;;AACA,WAAO;AAAEC,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAT,KAAP,CANkE,CAMzC;AAE1B,GARoB,CAtBR;AAgCZ;AACD,6BAA2BX,SAjCd;AAmCZ;AACA,oBAAkB;AAAEW,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAT,GApCN;AAuCZ;AACD,iBAAeZ,MAAM,CAACM,IAAP,CAAY;AACzB;AACA,oBAAgB;AAFS,GAAZ,CAxCF;AA6Cb;AACC,kBAAgB,CAACJ,GAAD,EAAMC,GAAN,KAAc;AAC7BA,IAAAA,GAAG,CAACU,IAAJ,CAASb,MAAM,CAACM,IAAP,CAAY;AACnB;AACA,sBAAgB;AAFG,KAAZ,CAAT;AAID;AAnDY,CAAd;AAwDD,eAAeD,KAAf,C,CAIA;AACA","sourcesContent":["import mockjs from 'mockjs';\n// import { delay } from 'roadhog-api-doc';  // 需要添加所有的请求延迟的时候， 可以通过第三方插件来简化这个问题\n\n\n// 当客户端（浏览器）发送请求，如：GET /api/users，\n// 那么本地启动的 umi dev 会跟此配置文件匹配请求路径以及方法，\n// 如果匹配到了，就会将请求通过配置处理，就可以像样例一样，\n// 你可以直接返回数据，也可以通过函数处理以及重定向到另一个服务器。\n\n// 以下真假切换接口\n\n// if (process.env.NODE_ENV === 'development') {\n//   require('./src/mock')\n// }\n\n// let postApi = (path, mock) => {\n//   // 当为0的时候\n//   return path + (mock ? '' : '.mock'); // '/todoList.mock'\n// };\n\n// export default {\n//   \"newsList\": postApi(\"/api/order/news\"),\n//   \"newsList2\": postApi(\"/api/newsList2\"),\n//   \"todoList\": postApi(\"/todoList\", 0)  // postApi方法接收两个参数，接口地址及是否需要mock数据，0需要，1不需要\n// }\n\n// 以上真假切换接口\n\nconst getNotice =  (req, res) => { res.end('OK'); }\n\n const proxy = {\n  // Mock.mock( rurl, template )\n  'GET /api/currentUser': mockjs.mock( '',{\n    'code': 0,\n    'data': {\n        'list|1-10': [{\n            // 属性 id 是一个自增数，起始值为 1，每次增 1\n            'id|+1': 1,\n            'title': '前端人人@id',\n            'status': 1\n        }]\n    },\n    'message': '操作成功',\n    'systemDate': new Date().getTime()\n  }),\n\n  // 使用 mockjs 等三方库   Mock.mock( rurl, rtype, template )\n  'GET /api/tags': mockjs.mock('/api/tags', 'get', {\n    'list|100': [{ name: '@city', 'value|1-10': 50, 'type|0-2': 1 }],\n  }),\n\n  // 添加跨域请求头 Mock.mock( rurl, rtype, function( options ) )\n  '/api/users/create': mockjs.mock('/api/users/create', (req, res) => {\n    // 指定被拦截的 Ajax 请求的响应时间，单位是毫秒。值可以是正整数，例如 400，表示 400 毫秒 后才会返回响应内容；也可以是横杠 '-' 风格的字符串，例如 '200-600'，表示响应时间介于 200 和 600 毫秒之间。默认值是'10-100'。\n    mockjs.setup({\n      timeout: 400 \n    })\n    // res.setHeader('Access-Control-Allow-Origin', '*');\n    return { users: [1, 2] } // 直接输出res.data = { users: [1, 2] }\n  \n  }),\n\n   // 支持制定执行回调\n  'GET /api/project/notice': getNotice,\n\n   // 支持值为 Object 和 Array\n   'GET /api/users': { users: [1, 2] },\n\n\n   // 静态 Mock 数据\n  '/api/random': mockjs.mock({\n    // 只随机一次\n    'number|1-100': 100,\n  }),\n\n  // 动态 Mock 数据\n   '/api/randoms': (req, res) => {\n    res.send(mockjs.mock({\n      // 每次请求均产生随机值\n      'number|1-100': 100,\n    }))\n  },\n};\n\n\n\nexport default proxy\n\n\n\n// 调用 delay 函数，统一处理\n// export default delay(proxy, 1000) "]},"metadata":{},"sourceType":"module"}
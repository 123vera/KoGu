{"ast":null,"code":"import mockjs from 'mockjs'; // import { delay } from 'roadhog-api-doc';  // 需要添加所有的请求延迟的时候， 可以通过第三方插件来简化这个问题\n// var express = require('express');\n// var app = express();\n// app.post('/home', function(req, res) {\n//   res.setHeader('Content-Type', 'application/json; charset=utf-8');\n// });\n// app.listen('3000', function () {\n//   console.log('mock app listening at http://localhost:3000');\n// });\n// 当客户端（浏览器）发送请求，如：GET /api/users，\n// 那么本地启动的 umi dev 会跟此配置文件匹配请求路径以及方法，\n// 如果匹配到了，就会将请求通过配置处理，就可以像样例一样，\n// 你可以直接返回数据，也可以通过函数处理以及重定向到另一个服务器。\n// 以下真假切换接口\n// if (process.env.NODE_ENV === 'development') {\n//   require('./src/mock')\n// }\n// let postApi = (path, mock) => {\n//   // 当为0的时候\n//   return path + (mock ? '' : '.mock'); // '/todoList.mock'\n// };\n// export default {\n//   \"newsList\": postApi(\"/api/order/news\"),\n//   \"newsList2\": postApi(\"/api/newsList2\"),\n//   \"todoList\": postApi(\"/todoList\", 0)  // postApi方法接收两个参数，接口地址及是否需要mock数据，0需要，1不需要\n// }\n// 以上真假切换接口\n\nvar getNotice = function getNotice(req, res) {\n  res.end('OK');\n};\n\nvar proxy = {\n  // Mock.mock( rurl, template )\n  'GET /api/currentUser': mockjs.mock('', {\n    'code': 0,\n    'data': {\n      'list|1-10': [{\n        // 属性 id 是一个自增数，起始值为 1，每次增 1\n        'id|+1': 1,\n        'title': '前端人人@id',\n        'status': 1\n      }]\n    },\n    'message': '操作成功',\n    'systemDate': new Date().getTime()\n  }),\n  // 使用 mockjs 等三方库   Mock.mock( rurl, rtype, template )\n  'GET /api/tags': mockjs.mock('/api/tags', 'get', {\n    'list|100': [{\n      name: '@city',\n      'value|1-10': 50,\n      'type|0-2': 1\n    }]\n  }),\n  // 添加跨域请求头 Mock.mock( rurl, rtype, function( options ) )\n  '/api/users/create': mockjs.mock('/api/users/create', function (req, res) {\n    // 指定被拦截的 Ajax 请求的响应时间，单位是毫秒。值可以是正整数，例如 400，表示 400 毫秒 后才会返回响应内容；也可以是横杠 '-' 风格的字符串，例如 '200-600'，表示响应时间介于 200 和 600 毫秒之间。默认值是'10-100'。\n    mockjs.setup({\n      timeout: 400\n    }); // res.setHeader('Access-Control-Allow-Origin', '*');\n\n    return {\n      users: [1, 2]\n    }; // 直接输出res.data = { users: [1, 2] }\n  }),\n  // 支持制定执行回调\n  'GET /api/project/notice': getNotice,\n  // 支持值为 Object 和 Array\n  'GET /api/users': {\n    users: [1, 2]\n  },\n  // 静态 Mock 数据\n  '/api/random': mockjs.mock({\n    // 只随机一次\n    'number|1-100': 100\n  }),\n  // 动态 Mock 数据\n  '/api/randoms': function apiRandoms(req, res) {\n    res.send(mockjs.mock({\n      // 每次请求均产生随机值\n      'number|1-100': 100\n    }));\n  }\n};\nexport default proxy; // 调用 delay 函数，统一处理\n// export default delay(proxy, 1000)","map":null,"metadata":{},"sourceType":"module"}